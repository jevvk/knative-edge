// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	edgeknativedevv1 "knative.dev/edge/pkg/apis/edge.knative.dev/v1"
)

// FakeEdgeClusters implements EdgeClusterInterface
type FakeEdgeClusters struct {
	Fake *FakeEdgeV1
}

var edgeclustersResource = schema.GroupVersionResource{Group: "edge.knative.dev", Version: "v1", Resource: "edgeclusters"}

var edgeclustersKind = schema.GroupVersionKind{Group: "edge.knative.dev", Version: "v1", Kind: "EdgeCluster"}

// Get takes name of the edgeCluster, and returns the corresponding edgeCluster object, and an error if there is any.
func (c *FakeEdgeClusters) Get(ctx context.Context, name string, options v1.GetOptions) (result *edgeknativedevv1.EdgeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(edgeclustersResource, name), &edgeknativedevv1.EdgeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*edgeknativedevv1.EdgeCluster), err
}

// List takes label and field selectors, and returns the list of EdgeClusters that match those selectors.
func (c *FakeEdgeClusters) List(ctx context.Context, opts v1.ListOptions) (result *edgeknativedevv1.EdgeClusterList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(edgeclustersResource, edgeclustersKind, opts), &edgeknativedevv1.EdgeClusterList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &edgeknativedevv1.EdgeClusterList{ListMeta: obj.(*edgeknativedevv1.EdgeClusterList).ListMeta}
	for _, item := range obj.(*edgeknativedevv1.EdgeClusterList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested edgeClusters.
func (c *FakeEdgeClusters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(edgeclustersResource, opts))
}

// Create takes the representation of a edgeCluster and creates it.  Returns the server's representation of the edgeCluster, and an error, if there is any.
func (c *FakeEdgeClusters) Create(ctx context.Context, edgeCluster *edgeknativedevv1.EdgeCluster, opts v1.CreateOptions) (result *edgeknativedevv1.EdgeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(edgeclustersResource, edgeCluster), &edgeknativedevv1.EdgeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*edgeknativedevv1.EdgeCluster), err
}

// Update takes the representation of a edgeCluster and updates it. Returns the server's representation of the edgeCluster, and an error, if there is any.
func (c *FakeEdgeClusters) Update(ctx context.Context, edgeCluster *edgeknativedevv1.EdgeCluster, opts v1.UpdateOptions) (result *edgeknativedevv1.EdgeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(edgeclustersResource, edgeCluster), &edgeknativedevv1.EdgeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*edgeknativedevv1.EdgeCluster), err
}

// Delete takes name of the edgeCluster and deletes it. Returns an error if one occurs.
func (c *FakeEdgeClusters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(edgeclustersResource, name, opts), &edgeknativedevv1.EdgeCluster{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeEdgeClusters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(edgeclustersResource, listOpts)

	_, err := c.Fake.Invokes(action, &edgeknativedevv1.EdgeClusterList{})
	return err
}

// Patch applies the patch and returns the patched edgeCluster.
func (c *FakeEdgeClusters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *edgeknativedevv1.EdgeCluster, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(edgeclustersResource, name, pt, data, subresources...), &edgeknativedevv1.EdgeCluster{})
	if obj == nil {
		return nil, err
	}
	return obj.(*edgeknativedevv1.EdgeCluster), err
}
